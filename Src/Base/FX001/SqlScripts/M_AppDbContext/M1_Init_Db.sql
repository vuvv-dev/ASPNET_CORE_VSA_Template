BEGIN TRANSACTION;
SET TRANSACTION ISOLATION LEVEL READ COMMITTED;

CREATE TABLE IF NOT EXISTS "__EFMigrationsHistory" (
    "MigrationId" character varying(150) NOT NULL,
    "ProductVersion" character varying(32) NOT NULL,
    CONSTRAINT "PK___EFMigrationsHistory" PRIMARY KEY ("MigrationId")
);

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM pg_namespace WHERE nspname = 'todo') THEN
        CREATE SCHEMA todo;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM pg_namespace WHERE nspname = 'todo') THEN
        CREATE SCHEMA todo;
    END IF;
END $EF$;

CREATE COLLATION todo.case_insensitive (LOCALE = 'en-u-ks-primary',
    PROVIDER = icu,
    DETERMINISTIC = False
);

CREATE TABLE todo.role (
    "Id" bigint GENERATED BY DEFAULT AS IDENTITY,
    "Name" character varying(256),
    "NormalizedName" character varying(256),
    "ConcurrencyStamp" text,
    CONSTRAINT "PK_role" PRIMARY KEY ("Id")
);

CREATE TABLE todo."user" (
    "Id" bigint GENERATED BY DEFAULT AS IDENTITY,
    "UserName" character varying(256),
    "NormalizedUserName" character varying(256),
    "Email" character varying(256),
    "NormalizedEmail" character varying(256),
    "EmailConfirmed" boolean NOT NULL,
    "PasswordHash" text,
    "SecurityStamp" text,
    "ConcurrencyStamp" text,
    "PhoneNumber" text,
    "PhoneNumberConfirmed" boolean NOT NULL,
    "TwoFactorEnabled" boolean NOT NULL,
    "LockoutEnd" timestamp with time zone,
    "LockoutEnabled" boolean NOT NULL,
    "AccessFailedCount" integer NOT NULL,
    CONSTRAINT "PK_user" PRIMARY KEY ("Id")
);

CREATE TABLE todo.role_claim (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "RoleId" bigint NOT NULL,
    "ClaimType" text,
    "ClaimValue" text,
    CONSTRAINT "PK_role_claim" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_role_claim_role_RoleId" FOREIGN KEY ("RoleId") REFERENCES todo.role ("Id") ON DELETE CASCADE
);

CREATE TABLE todo.additional_user_info (
    "Id" bigint NOT NULL,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    description VARCHAR(65535) NOT NULL,
    CONSTRAINT "PK_additional_user_info" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_additional_user_info_user_Id" FOREIGN KEY ("Id") REFERENCES todo."user" ("Id")
);

CREATE TABLE todo.user_claim (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "UserId" bigint NOT NULL,
    "ClaimType" text,
    "ClaimValue" text,
    CONSTRAINT "PK_user_claim" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_user_claim_user_UserId" FOREIGN KEY ("UserId") REFERENCES todo."user" ("Id") ON DELETE CASCADE
);

CREATE TABLE todo.user_login (
    "LoginProvider" text NOT NULL,
    "ProviderKey" text NOT NULL,
    "ProviderDisplayName" text,
    "UserId" bigint NOT NULL,
    CONSTRAINT "PK_user_login" PRIMARY KEY ("LoginProvider", "ProviderKey"),
    CONSTRAINT "FK_user_login_user_UserId" FOREIGN KEY ("UserId") REFERENCES todo."user" ("Id") ON DELETE CASCADE
);

CREATE TABLE todo.user_role (
    "UserId" bigint NOT NULL,
    "RoleId" bigint NOT NULL,
    CONSTRAINT "PK_user_role" PRIMARY KEY ("UserId", "RoleId"),
    CONSTRAINT "FK_user_role_role_RoleId" FOREIGN KEY ("RoleId") REFERENCES todo.role ("Id") ON DELETE CASCADE,
    CONSTRAINT "FK_user_role_user_UserId" FOREIGN KEY ("UserId") REFERENCES todo."user" ("Id") ON DELETE CASCADE
);

CREATE TABLE todo.user_token (
    "UserId" bigint NOT NULL,
    "LoginProvider" text NOT NULL,
    "Name" text NOT NULL,
    "Value" text,
    CONSTRAINT "PK_user_token" PRIMARY KEY ("UserId", "LoginProvider", "Name"),
    CONSTRAINT "FK_user_token_user_UserId" FOREIGN KEY ("UserId") REFERENCES todo."user" ("Id") ON DELETE CASCADE
);

CREATE TABLE todo.todo_task_list (
    "Id" bigint GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(255) NOT NULL,
    created_date TIMESTAMP WITH TIME ZONE NOT NULL,
    user_id BIGINT NOT NULL,
    CONSTRAINT "PK_todo_task_list" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_todo_task_list_additional_user_info_user_id" FOREIGN KEY (user_id) REFERENCES todo.additional_user_info ("Id")
);

CREATE TABLE todo.todo_task (
    "Id" bigint GENERATED BY DEFAULT AS IDENTITY,
    content VARCHAR(255) NOT NULL,
    note VARCHAR(255) NOT NULL,
    created_date TIMESTAMP WITH TIME ZONE NOT NULL,
    due_date TIMESTAMP WITH TIME ZONE NOT NULL,
    is_in_my_day boolean NOT NULL,
    is_important boolean NOT NULL,
    is_finished boolean NOT NULL,
    recurring_expression VARCHAR(255) NOT NULL,
    task_list_id BIGINT NOT NULL,
    CONSTRAINT "PK_todo_task" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_todo_task_todo_task_list_task_list_id" FOREIGN KEY (task_list_id) REFERENCES todo.todo_task_list ("Id")
);

CREATE TABLE todo.todo_task_step (
    "Id" bigint GENERATED BY DEFAULT AS IDENTITY,
    content VARCHAR(255) NOT NULL,
    created_date TIMESTAMP WITH TIME ZONE NOT NULL,
    todo_task_id BIGINT NOT NULL,
    CONSTRAINT "PK_todo_task_step" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_todo_task_step_todo_task_todo_task_id" FOREIGN KEY (todo_task_id) REFERENCES todo.todo_task ("Id")
);

CREATE UNIQUE INDEX "RoleNameIndex" ON todo.role ("NormalizedName");

CREATE INDEX "IX_role_claim_RoleId" ON todo.role_claim ("RoleId");

CREATE INDEX "IX_todo_task_task_list_id" ON todo.todo_task (task_list_id);

CREATE INDEX "IX_todo_task_list_user_id" ON todo.todo_task_list (user_id);

CREATE INDEX "IX_todo_task_step_todo_task_id" ON todo.todo_task_step (todo_task_id);

CREATE INDEX "EmailIndex" ON todo."user" ("NormalizedEmail");

CREATE UNIQUE INDEX "UserNameIndex" ON todo."user" ("NormalizedUserName");

CREATE INDEX "IX_user_claim_UserId" ON todo.user_claim ("UserId");

CREATE INDEX "IX_user_login_UserId" ON todo.user_login ("UserId");

CREATE INDEX "IX_user_role_RoleId" ON todo.user_role ("RoleId");

INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
VALUES ('20250109170902_M1_Init_Db', '9.0.0');

COMMIT;

